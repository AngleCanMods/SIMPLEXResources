//	================================== seeing the coding among the stars
//	*** ANGLECAN SIMPLEX Resources ***
//	================================== by theJesuit
//	                      ISRU Configs
//
//	*** VERSION 1.11.20211227
//	*** Licence CC-BY-NC-SA (http://creativecommons.org/licenses/by-nc-sa/4.0/)
//		This License extends to textures created by theJesuit found in Gamedata/AngleCanMods/SimplexResources/Assets
//		ACStationTanks.dds based on original KD-StationTanks.dds created by @Eleusis La Arwall available at https://spacedock.info/mod/308/ and made available by same license CC-BY-SA 4.0 International
//
//	***	CONTENTS
//		Remove converter modules from stock parts
//
//		quantumISRU,heavyISRU,ISRU,MiniISRU	add Oxidizer 									OxidizerBaking
//		quantumISRU,heavyISRU,ISRU			add LiquidFuel, MonoPropellant, OrganicSlurry	LiquidFuelDistillation, LiquidFuelCatalysing, MonoPropellantFermentation, OrganicSlurryBrewing
//		quantumISRU,heavyISRU				add PowderFuel									PowderFuel Fixating
//
//		Adjust the parts for their efficiencies
//		All processes require the same EC depending on part, the larger parts have increased conversion efficiency, with less losses (you don't have to mine as much)
//		
//		Mining Expansion	SMX_Mk2ISRURefinery|SMX_Size3ISRU|SMX_Mk3ISRURefinery|SMX_Size0ISRU
//			fuel cells		SMX_Mk2Generator|SMX_Size1Generator|
//			ore tanks 		SMX_Mk2Oretank|SMX_Size0OreTank|SMX_Size3OreTank|SMX_Mk3OreTank
//			RefineOre		
//			SMX_Size0Generator is 1/3 array, Size1 is 50/sec , mk2 is 75/sec size 2 really big 120/sec!

//	Ratios should be like:
//		MiniISRU 	= ELTinySmelter, KD-FurnaceSmall
//		ISRU  		= ELSmallSmelter, KD-Furnace
//		HeavyISRU 	= ELSmeter, KD-ChemicalPlant
//	Smelter's role is to extract MetalParts and BaseAir
//	KD-FabricationContainer should be for making CustomParts, not MetalParts, efficicincy as ISRU

//	***	Remove previous EL and other converters

@PART[ELLathe,ELTinySmelter,ELSmallSmelter,ELSmelter,ELConstructionDrone_v2]:NEEDS[ExtraplanetaryLaunchpads]
{	
	!MODULE[ELConverter],*	{}
	!MODULE[ELCoreHeat],*	{}
	!MODULE[ModuleResourceConverter],*	{}
	!RESOURCE[*],*	{}
}

@PART[KD-FurnaceSmall,KD-Furnace,KD-ChemicalReactor,KD-FabricationContainer,KD-3D-Printer]:NEEDS[KeridianDynamics]
{	
	!MODULE[ModuleResourceConverter],*	{}
	!RESOURCE[*],*	{}
}

@PART[KD-FurnaceSmall,KD-Furnace,KD-ChemicalReactor,KD-FabricationContainer,KD-3D-Printer]:NEEDS[KeridianDynamics,CommunityResourcePack]:LAST[KeridianDynamics]
{	
	!MODULE[ModuleResourceConverter],*	{}
	!RESOURCE[*],*	{}
}

//	***	MetalParts Smelting

	@PART[ELTinySmelter,ELSmallSmelter,ELSmelter]:NEEDS[ExtraplanetaryLaunchpads,!KerbalismSimplex]
		{	MODULE
				{	name = ModuleResourceConverter
					ConverterName = MetalParts Smelting
					StartActionName = Start Smelting		//	NaturalOre --> Oxidizer
					StopActionName = Stop Smelting			//	NaturalOre --> Oxidizer
					AutoShutdown = true
					TemperatureModifier
						{	key = 0 50000
							key = 750 50000
							key = 1000 50000
							key = 1250 50000
							key = 2000 50000
							key = 4000 50000
						}
					GeneratesHeat = true
					DefaultShutoffTemp = .8
					ThermalEfficiency
						{	key = 0 1.0 0 0
							key = 500 1.0 0 0
							key = 1000 1.0 0 0
							key = 1500 1.0 0 0
							key = 3000 1.0 0 0
						}
					UseSpecialistBonus = true	
					SpecialistEfficiencyFactor = 0.2
					SpecialistBonusBase = 0.05
					ExperienceEffect = ConverterSkill
					EfficiencyBonus = 1	
					INPUT_RESOURCE
						{	ResourceName = NaturalOre		//	Density (naturalOre is 0.035)
							Ratio = .1
							FlowMode = STAGE_PRIORITY_FLOW
						}
					INPUT_RESOURCE
						{	ResourceName = ElectricCharge
							Ratio = 320
						}
					OUTPUT_RESOURCE
						{	ResourceName = MetalParts		//	Density (MetalParts is 0.01) (Oxidizer is 0.005)
							Ratio = .3						//	Ratio is 1 * NaturalOre = 3 * MetalParts + 1 * Oxidizer
							DumpExcess = false				//	Ratio    1 * 0.035      = 3 * 0.01       + 1 * 0.005
							FlowMode = STAGE_PRIORITY_FLOW	//	quantumISRU will produce both at the same time.  Maybe also heavyISRU with advancedActuators.
						}
					OUTPUT_RESOURCE
						{	ResourceName = Air			
							Ratio = 0.0001					
							DumpExcess = true				
							FlowMode = STAGE_PRIORITY_FLOW.
						}
				}
		}

	@PART[KD-FurnaceSmall,KD-Furnace,KD-ChemicalReactor]:NEEDS[KeridianDynamics,!KerbalismSimplex]:LAST[KeridianDynamics]
		{	MODULE
				{	name = ModuleResourceConverter
					ConverterName = MetalParts Smelting
					StartActionName = Start MetalParts Smelting		//	NaturalOre --> Oxidizer
					StopActionName = Stop MetalPartsSmelting		//	NaturalOre --> Oxidizer
					AutoShutdown = true
					TemperatureModifier
						{	key = 0 50000
							key = 750 50000
							key = 1000 50000
							key = 1250 50000
							key = 2000 50000
							key = 4000 50000
						}
					GeneratesHeat = true
					DefaultShutoffTemp = .8
					ThermalEfficiency
						{	key = 0 1.0 0 0
							key = 500 1.0 0 0
							key = 1000 1.0 0 0
							key = 1500 1.0 0 0
							key = 3000 1.0 0 0
						}
					UseSpecialistBonus = true	
					SpecialistEfficiencyFactor = 0.2
					SpecialistBonusBase = 0.05
					ExperienceEffect = ConverterSkill
					EfficiencyBonus = 1	
					INPUT_RESOURCE
						{	ResourceName = NaturalOre		//	Density (naturalOre is 0.035)
							Ratio = .1
							FlowMode = STAGE_PRIORITY_FLOW
						}
					INPUT_RESOURCE
						{	ResourceName = ElectricCharge
							Ratio = 320
						}
					OUTPUT_RESOURCE
						{	ResourceName = MetalParts		//	Density (MetalParts is 0.01) (Oxidizer is 0.005)
							Ratio = .3						//	Ratio is 1 * NaturalOre = 3 * MetalParts + 1 * Oxidizer
							DumpExcess = false				//	Ratio    1 * 0.035      = 3 * 0.01       + 1 * 0.005
							FlowMode = STAGE_PRIORITY_FLOW	//	quantumISRU will produce both at the same time.  Maybe also heavyISRU with advancedActuators.
						}
					OUTPUT_RESOURCE
						{	ResourceName = Air			
							Ratio = 0.0001					
							DumpExcess = true				
							FlowMode = STAGE_PRIORITY_FLOW.
						}
				}
		}

//	***	CustomParts Fabrication

	@PART[ELLathe]:NEEDS[ExtraplanetaryLaunchpads,!KerbalismSimplex]
		{	MODULE
				{	name = ModuleResourceConverter
					ConverterName = CustomParts Fabrication
					StartActionName = Start CustonParts Fabrication
					StopActionName = Stop CustonParts Fabrication
					AutoShutdown = true
					TemperatureModifier
						{	key = 0 50000
							key = 750 50000
							key = 1000 50000
							key = 1250 50000
							key = 2000 50000
							key = 4000 50000
						}
					GeneratesHeat = true
					DefaultShutoffTemp = .8
					ThermalEfficiency
						{	key = 0 1.0 0 0
							key = 500 1.0 0 0
							key = 1000 1.0 0 0
							key = 1500 1.0 0 0
							key = 3000 1.0 0 0
						}
					UseSpecialistBonus = true	
					SpecialistEfficiencyFactor = 0.2
					SpecialistBonusBase = 0.05
					ExperienceEffect = ConverterSkill
					EfficiencyBonus = 1	
					INPUT_RESOURCE
						{	ResourceName = RareOre		//	Density (naturalOre is 0.035)
							Ratio = .01
							FlowMode = STAGE_PRIORITY_FLOW
						}
					INPUT_RESOURCE
						{	ResourceName = ElectricCharge
							Ratio = 160
						}
					OUTPUT_RESOURCE
						{	ResourceName = CustomParts		//	Density (MetalParts is 0.01) (Oxidizer is 0.005)
							Ratio = .01						//	Ratio is 1 * NaturalOre = 3 * MetalParts + 1 * Oxidizer
							DumpExcess = false				//	Ratio    1 * 0.035      = 3 * 0.01       + 1 * 0.005
							FlowMode = STAGE_PRIORITY_FLOW	//	quantumISRU will produce both at the same time.  Maybe also heavyISRU with advancedActuators.
						}
					OUTPUT_RESOURCE
						{	ResourceName = BadAir			
							Ratio = 0.00001					
							DumpExcess = true				
							FlowMode = STAGE_PRIORITY_FLOW.
						}
				}
		}

	@PART[KD-FabricationContainer,KD-3D-Printer,]:NEEDS[KeridianDynamics,!KerbalismSimplex]:LAST[KeridianDynamics]
		{	MODULE
				{	name = ModuleResourceConverter
					ConverterName = CustomParts Fabrication
					StartActionName = Start CustomParts Fabrication
					StopActionName = Stop CustomParts Fabrication
					AutoShutdown = true
					GeneratesHeat = false
					DefaultShutoffTemp = .8
					UseSpecialistBonus = true	
					SpecialistEfficiencyFactor = 0.2
					SpecialistBonusBase = 0.05
					ExperienceEffect = ConverterSkill
					EfficiencyBonus = 1	
					INPUT_RESOURCE
						{	ResourceName = RareOre		//	Density (naturalOre is 0.035)
							Ratio = .01
							FlowMode = STAGE_PRIORITY_FLOW
						}
					INPUT_RESOURCE
						{	ResourceName = ElectricCharge
							Ratio = 160
						}
					OUTPUT_RESOURCE
						{	ResourceName = CustomParts		//	Density (MetalParts is 0.01) (Oxidizer is 0.005)
							Ratio = .01						//	Ratio is 1 * NaturalOre = 3 * MetalParts + 1 * Oxidizer
							DumpExcess = false				//	Ratio    1 * 0.035      = 3 * 0.01       + 1 * 0.005
							FlowMode = STAGE_PRIORITY_FLOW	//	quantumISRU will produce both at the same time.  Maybe also heavyISRU with advancedActuators.
						}
					OUTPUT_RESOURCE
						{	ResourceName = BadAir			
							Ratio = 0.00001					
							DumpExcess = true				
							FlowMode = STAGE_PRIORITY_FLOW.
						}
				}
		}

//	***	Efficiency Pass
//	Small as the equivalent ISRU, note twice the power requirements 
	@PART[ELTinySmelter]			{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
									{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.125	}		
										@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.6	}	}	}
	@PART[KELSmallSmelter]				{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
									{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.25	}
										@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.75	}	}	}
	@PART[ELSmelter]				{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
									{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.50	}
										@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.9	}	}	}
	@PART[ELLathe]					{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
									{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.25	}
										@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.75	}	}	}

	@PART[KD-FurnaceSmall]:LAST[KeridianDynamics]			{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
															{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.125	}		
																@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.6	}	}	}
	@PART[KD-Furnace]:LAST[KeridianDynamics]				{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
															{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.25	}
																@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.75	}	}	}
	@PART[KD-ChemicalReactor]:LAST[KeridianDynamics]		{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
															{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.50	}
																@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.9	}	}	}
	@PART[KD-FabricationContainer]:LAST[KeridianDynamics]	{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
															{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.25	}
																@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.75	}	}	}
	@PART[KD-3D-Printer]:LAST[KeridianDynamics]				{	@MODULE[ModuleResourceConverter]:HAS[#ConverterName[*]]
															{	@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]	{	@Ratio *=.50	}
																@OUTPUT_RESOURCE:HAS[#ResourceName[*]]				{	@Ratio *=0.9	}	}	}
										
